# -*- coding: utf-8 -*-
"""ACTIVIDADCSV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iaIX13RhS-FCpk-JGgq6fYIQjftGL_KC
"""

import pandas as pd

groups_df = pd.read_csv('STUDENT_GROUP.csv')
groups_df.head()

attendance_df=pd.read_csv('attendance.csv')
attendance_df.head()

groups_df.dtypes

attendance_df.dtypes

attendance_df = attendance_df.rename(columns={'STUDENT_ID': 'student_id'})


attendance_df['student_id'] = attendance_df['student_id'].astype(str)
groups_df['student_id'] = groups_df['student_id'].astype(str)


merged_df = pd.merge(groups_df, attendance_df, on='student_id', how='inner')

print(merged_df.head())

import pytz

# Convertir 'DTTM' a datetime
merged_df['DTTM'] = pd.to_datetime(merged_df['DTTM'])

# Asignar zona horaria UTC (si no tiene info de zona horaria)
merged_df['DTTM'] = merged_df['DTTM'].dt.tz_localize('UTC')

# Convertir a zona horaria local UTC-6 y sobreescribir la columna original
merged_df['DTTM'] = merged_df['DTTM'].dt.tz_convert('Etc/GMT+6')

merged_df['DT'] = merged_df['DTTM'].dt.date

# Mostrar el resultado
print(merged_df.head())

merged_df['inicio_semana'] = pd.to_datetime(merged_df['DT']) - pd.to_timedelta(
    pd.to_datetime(merged_df['DT']).dt.weekday, unit='D'
)


todas_las_semanas = merged_df['inicio_semana'].drop_duplicates()
alumnos = groups_df[['student_id', 'group_id']].drop_duplicates()
combinaciones = alumnos.assign(key=1).merge(
    pd.DataFrame({'inicio_semana': todas_las_semanas, 'key': 1}), on='key'
).drop('key', axis=1)


asistencia = merged_df[['student_id', 'inicio_semana']].drop_duplicates()
asistencia['asistio'] = True
asistencia_completa = combinaciones.merge(
    asistencia, on=['student_id', 'inicio_semana'], how='left'
)
asistencia_completa['falta'] = asistencia_completa['asistio'].isna()


faltas_por_semana = (
    asistencia_completa
    .groupby(['group_id', 'inicio_semana'])
    .agg(
        faltas=('falta', 'sum'),
        tam_grupo=('student_id', 'count')
    )
    .reset_index()
)
faltas_por_semana['porcentaje_faltas'] = (
    faltas_por_semana['faltas'] / faltas_por_semana['tam_grupo'] * 100
)


conteo_semanal = merged_df.groupby('inicio_semana').size().reset_index(name='num_registros')
semanas_validas = conteo_semanal.loc[conteo_semanal['num_registros'] >= 20, 'inicio_semana']
faltas_filtrado = faltas_por_semana[faltas_por_semana['inicio_semana'].isin(semanas_validas)]


TOP_N = 3
top_faltas = (
    faltas_filtrado
    .sort_values(['group_id', 'faltas'], ascending=[True, False])
    .groupby('group_id', group_keys=False)
    .apply(lambda df: df.head(TOP_N), include_groups=True)
)

print("Top semanas con más faltas (filtrando semanas con >=20 registros globales):")
print(top_faltas.rename(columns={
    'group_id': 'Grupo',
    'inicio_semana': 'Inicio de semana',
    'faltas': 'Número de faltas',
    'tam_grupo': 'Tamaño del grupo',
    'porcentaje_faltas': 'Porcentaje de faltas (%)'
}))


peor_semana = faltas_filtrado.loc[faltas_filtrado['faltas'].idxmax()]
print("\nMayor número de faltas en una semana (resumen):")
print(peor_semana.rename({
    'group_id': 'Grupo',
    'inicio_semana': 'Inicio de semana',
    'faltas': 'Número de faltas',
    'tam_grupo': 'Tamaño del grupo',
    'porcentaje_faltas': 'Porcentaje de faltas (%)'
}))
