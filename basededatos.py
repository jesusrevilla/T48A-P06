# -*- coding: utf-8 -*-
"""BaseDeDatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v2WaOof016MnjVpK6X_PbZCK4hX4Bxl8
"""

import pandas as pd

df_attendance = pd.read_csv('drive/MyDrive/attendance.csv')
df_groups = pd.read_csv('drive/MyDrive/STUDENT_GROUP.csv')

df_attendance.tail(3)

df_groups.tail()

df_groups.dtypes

df_attendance.dtypes

df_attendance = df_attendance.rename(columns={'STUDENT_ID': 'student_id'})

df_attendance.head(1)

df_groups.describe()

#Convert 'student_id' to numeric, coercing errors to NaN
df_attendance['student_id'] = pd.to_numeric(df_attendance['student_id'], errors='coerce')

#Drop rows where 'student_id' is not an integer
df_attendance.dropna(subset=['student_id'], inplace=True)

#Convert 'student_id' to int64
df_attendance['student_id'] = df_attendance['student_id'].astype('int64')

df_attendance.describe()

# prompt: merge df_attendance with df_groups and keep only records with student in df_groups

# Merge the two dataframes based on the 'student_id' column
merged_df = pd.merge(df_attendance, df_groups, on='student_id', how='inner')

#Filter the merged dataframe to keep only records where 'student_id' is present
#Assuming 'student_id' is a column in df_groups
filtered_df = merged_df[merged_df['student_id'].notna()]

#Display the filtered dataframe (optional)
filtered_df

#Filtrar por año y por grupo
# Crear un df que tenga el conteo de las asistencias, faltas por día
# Investigar una función como de una fecha para saber qué día es y buscar la correlación con el conteo de faltas
# Correlación entre el día que falta y la cantidad de faltas lo que serían 3 correlaciones (lunes, martes y miércoles)

# Convertir la columna DT a datetime (si aún no lo está)
filtered_df["DT"] = pd.to_datetime(filtered_df["DT"])

# Definir los valores a filtrar
año_filtrado = 2025
grupo_filtrado = "20251ST48A"

# Aplicar el filtro
filtered_df_filtrado = filtered_df[(filtered_df["DT"].dt.year == año_filtrado) &
                                   (filtered_df["group_id"] == grupo_filtrado)]

# Mostrar los datos filtrados
filtered_df_filtrado

# Asegurar que DT sea de tipo datetime
filtered_df_filtrado["DT"] = pd.to_datetime(filtered_df_filtrado["DT"])

# Filtrar el grupo específico
grupo_filtrado = "20251ST48A"
df_grupo = filtered_df_filtrado[filtered_df_filtrado["group_id"] == grupo_filtrado]

# Obtener la lista total de alumnos en ese grupo
alumnos_totales = df_grupo["student_id"].unique()

# Contar alumnos presentes por fecha
alumnos_por_fecha = df_grupo.groupby("DT")["student_id"].nunique().reset_index()
alumnos_por_fecha.rename(columns={"student_id": "presentes"}, inplace=True)

# Calcular alumnos ausentes (Total - Presentes)
alumnos_por_fecha["Faltas"] = len(alumnos_totales) - alumnos_por_fecha["presentes"]

# Convertir la fecha a un número ordinal para la correlación
alumnos_por_fecha["DT_ordinal"] = alumnos_por_fecha["DT"].map(pd.Timestamp.toordinal)

# Calcular la correlación entre la fecha y los ausentes
#correlacion = alumnos_por_fecha["DT_ordinal"].corr(alumnos_por_fecha["Faltas"])
import numpy as np

# Calcular la media
mean_x = np.mean(alumnos_por_fecha["DT_ordinal"])
mean_y = np.mean(alumnos_por_fecha["Faltas"])

# Calcular las desviaciones
deviation_x = alumnos_por_fecha["DT_ordinal"] - mean_x
deviation_y = alumnos_por_fecha["Faltas"] - mean_y

# Calcular el producto de las desviaciones
product_deviations = deviation_x * deviation_y

# Sumar los productos de las desviaciones
sum_product_deviations = np.sum(product_deviations)

# Calcular la desviación estándar
std_x = np.std(alumnos_por_fecha["DT_ordinal"], ddof=1)
std_y = np.std(alumnos_por_fecha["Faltas"], ddof=1)

# Calcular el coeficiente de correlación de Pearson
r = sum_product_deviations / ((len(alumnos_por_fecha["DT_ordinal"]) - 1) * std_x * std_y)

print("Coeficiente de correlación de Pearson:", r)

# Mostrar la relación de faltas por día
tabla_faltas = alumnos_por_fecha[["DT", "Faltas"]]

# Ordenar la tabla por fecha
tabla_faltas_ordenada = tabla_faltas.sort_values(by="DT")

tabla_faltas_ordenada

import pandas as pd

# Asegurar que la columna DT sea de tipo datetime
filtered_df_filtrado["DT"] = pd.to_datetime(filtered_df_filtrado["DT"])

# Filtrar el grupo específico
grupo_filtrado = "20251ST48A"
df_grupo = filtered_df_filtrado[filtered_df_filtrado["group_id"] == grupo_filtrado]

# Obtener la lista total de alumnos en ese grupo
alumnos_totales = df_grupo["student_id"].unique()

# Filtrar solo los martes, miércoles y jueves (1=Martes, 2=Miércoles, 3=Jueves)
dias_especificos = [1, 2, 3]
df_dias = df_grupo[df_grupo["DT"].dt.weekday.isin(dias_especificos)]

# Contar alumnos presentes por fecha
alumnos_por_fecha_dias = df_dias.groupby("DT")["student_id"].nunique().reset_index()
alumnos_por_fecha_dias.rename(columns={"student_id": "presentes"}, inplace=True)

# Calcular alumnos ausentes (Total - Presentes)
alumnos_por_fecha_dias["ausentes"] = len(alumnos_totales) - alumnos_por_fecha_dias["presentes"]

# Convertir la fecha a un número ordinal para la correlación
alumnos_por_fecha_dias["DT_ordinal"] = alumnos_por_fecha_dias["DT"].map(pd.Timestamp.toordinal)

# Diccionario para guardar las correlaciones
correlaciones = {}

# Diccionario para guardar las tablas separadas por día
tablas_por_dia = {}

# Mapeo de número de día de la semana a su nombre en inglés
dias_nombres = {1: "Tuesday", 2: "Wednesday", 3: "Thursday"}

# Calcular la correlación y almacenar las tablas separadas
for dia in dias_especificos:
    df_dia = alumnos_por_fecha_dias[alumnos_por_fecha_dias["DT"].dt.weekday == dia]

    if not df_dia.empty:
        correlacion = df_dia["DT_ordinal"].corr(df_dia["ausentes"])
        nombre_dia = dias_nombres[dia]  # Obtener el nombre del día
        correlaciones[nombre_dia] = correlacion

        # Guardar la tabla de ausencias por día
        tablas_por_dia[nombre_dia] = df_dia[["DT", "ausentes"]].sort_values(by="DT")

# Mostrar las tablas separadas por día
for dia, tabla in tablas_por_dia.items():
    print(f"\n{dia}")
    print(tabla.to_string(index=False))

# Mostrar las correlaciones
print("\nCorrelaciones por día:")
for dia, correlacion in correlaciones.items():
    print(f"Correlación entre la fecha y la cantidad de ausentes en {dia}: {correlacion:.4f}")