# -*- coding: utf-8 -*-
"""ejercicios con pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ur10gtmp3-2HFUA0f6x0ETbfJjcHf1IG
"""

import pandas as pd

df_attendance = pd.read_csv('attendance.csv')
df_groups = pd.read_csv('STUDENT_GROUP.csv')

df_attendance.tail()
df_groups.tail()

df_attendance.dtypes
df_groups.dtypes

df_attendance.rename(columns={'STUDENT_ID': 'student_id'}, inplace=True) #cambio permanente implace en el DataFrame

df_attendance.head(1)

#obtiene estadisticas solo usando los datos numericos
df_groups.describe()
df_attendance.describe()

#limpiar datos convierte a datos enteros, todo con texto lo cambia a NaN (not at number)
df_attendance['student_id'] = pd.to_numeric(df_attendance['student_id'], errors='coerce')

#elimina las columnas que tienen el valor NaN
df_attendance.dropna(subset=['student_id'], inplace=True)

#convertimos a int64
df_attendance['student_id'] = df_attendance['student_id'].astype('int64') #np.int64

df_attendance.describe()

#mezclar los datos en base a la columna student_id usando inner join
merged_df = pd.merge(df_attendance, df_groups, on='student_id', how='inner')

#filtramos los data frames mezclados para seleccionar solamente las coincidencias donde student_id este presente en df_group
filtrered_df = merged_df[merged_df['student_id'].notna()]

#ver lo hecho
print(filtrered_df)

# 1 - filtrar por año y por grupo
# 2 - crear un df que tenga el conteo de las asistencias, faltas por dia
# investigar una función como de una fecha saber que dia es y buscar la correlacion con el conteo de faltas
# 3 - correlacion entre el dia que falta y la cantidad de faltas 3 correlaciones (lunes, martes, miercoles)

# Convertimos la columna DT a objetos
filtrered_df['DT'] = pd.to_datetime(filtrered_df['DT'])

def filtro_por_anio_y_grupo(df, anio, grupo):
    # Extraemos el campo de año de la columna DT
    df['DT'] = df['DT'].dt.year

    # Usamos los filtros
    filtered_df = df[(df['DT'] == anio) & (df['group_id'] == grupo)]

    return filtered_df

# Variables de filtro
anio = 2025
grupo = '20251ST48A'

# Llamamos a la función
anio_grupo_df = filtro_por_anio_y_grupo(filtrered_df, anio, grupo)

# Verificamos la tabla
print("Filtro Año y Grupo")
print("Año: " + str(anio) + "  Grupo: " + str(grupo))
print(anio_grupo_df)

# Convertimos la columna 'DTTM' a datetime usando el DF anterior
anio_grupo_df['DTTM'] = pd.to_datetime(anio_grupo_df['DTTM'])

# Agrupamos por día y contamos los datos ya que solo se registra la fecha y hora representando asistencia
asistencia_por_dia_df = anio_grupo_df.groupby(anio_grupo_df['DTTM'].dt.date)['DTTM'].count().reset_index(name='asistencias')

# Calculamos las faltas basandonos en el conteo de las asistencias y la cantidad de alumnos
asistencia_por_dia_df['faltas'] = 23 - asistencia_por_dia_df['asistencias']

# Mostramos el DataFrame resultante
asistencia_por_dia_df