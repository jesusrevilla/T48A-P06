# -*- coding: utf-8 -*-
"""P06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-3eIOC6kxn0iorbJKBjqhobBivQkynPI
"""

import pandas as pd
import numpy as np
import datetime


# Cargar datos desde archivos CSV
def cargar_datos():
    student_group = pd.read_csv('/content/csv/STUDENT_GROUP.csv')
    attendance = pd.read_csv('/content/csv/attendance.csv')
    return student_group, attendance

# Limpieza y preparación de datos
def limpiar_datos(student_group, attendance):
    # Eliminar valores NaN
    student_group.dropna(inplace=True)
    attendance.dropna(inplace=True)

    # Renombrar columnas
    attendance.rename(columns={'STUDENT_ID': 'student_id'}, inplace=True)

    # Convertir a numérico y eliminar no numéricos
    attendance['student_id'] = pd.to_numeric(attendance['student_id'], errors='coerce')
    attendance = attendance.dropna(subset=['student_id'])
    attendance['student_id'] = attendance['student_id'].astype(np.int64)

    return student_group, attendance

# Combinar datos y filtrar
def combinar_filtrar(student_group, attendance):
    merge = attendance.merge(student_group, on='student_id', how='inner')
    data = merge[merge['DT'] >= '2025-01-01']
    data = data.loc[data['group_id'] == '20251ST48A']
    return data

# Procesamiento de fechas y asistencia
def procesar_fechas_asistencia(data):
    alumnos = data['student_id'].unique()
    data['DT'] = pd.to_datetime(data['DT'])
    data['DT'] = data['DT'].dt.tz_localize('America/Mexico_City', ambiguous='NaT')
    data['DT'] = data['DT'] - pd.Timedelta(days=1)

    asistencia_dia = data.groupby('DT')['student_id'].count().reset_index(name='Asistencia')
    asistencia_dia['day_name'] = asistencia_dia['DT'].dt.day_name()
    asistencia_dia['alumnos_totales'] = len(alumnos)

    dias_mapping = {
        'Monday': 1,
        'Tuesday': 2,
        'Wednesday': 3,
        'Thursday': 4,
        'Friday': 5,
        'Saturday': 6,
        'Sunday': 7
    }

    asistencia_dia['day_number'] = asistencia_dia['day_name'].map(dias_mapping)
    return asistencia_dia

# Calcular correlación
def calcular_correlacion(asistencia_dia):
    correlacion = asistencia_dia['Asistencia'].corr(asistencia_dia['day_number'])
    return correlacion

# Ejecución principal
if __name__ == "__main__":
    student_group, attendance = cargar_datos()
    student_group, attendance = limpiar_datos(student_group, attendance)
    data = combinar_filtrar(student_group, attendance)
    asistencia_dia = procesar_fechas_asistencia(data)
    correlacion = calcular_correlacion(asistencia_dia)
    print(f"Correlación: {correlacion}")
    print(asistencia_dia)