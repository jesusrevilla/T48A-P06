# -*- coding: utf-8 -*-
"""P06_178361.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/103uF0DauwTWlURS2-XpkOgFuFc9Jlp1A
"""

import pandas as pd

# Cargar los archivos CSV
attendance_df = pd.read_csv("attendance.csv")
student_group_df = pd.read_csv("STUDENT_GROUP.csv")
#print(attendance_df)

# Convertir los student_id a string en ambos DataFrames para evitar incompatibilidades
attendance_df['STUDENT_ID'] = attendance_df['STUDENT_ID'].astype(str)
student_group_df['student_id'] = student_group_df['student_id'].astype(str)

# Convertir la columna DT (fecha) a tipo datetime
attendance_df['DT'] = pd.to_datetime(attendance_df['DT'])

# Filtrar registros de asistencia para el año 2025.
# Se asume que la columna 'date' tiene el formato 'YYYY-MM-DD'.
attendance_2025 = attendance_df[attendance_df['DT']>'2025']
#print(attendance_2025)

# Filtrar estudiantes que pertenecen al grupo T48A.
# Se asume que la columna 'group' contiene el código de grupo.
group_t48a = student_group_df[student_group_df['group_id'].str.contains('T48A')]
#print(group_t48a)

# Filtrar los registros de asistencia para que solo queden los de estudiantes en T48A
filtered_attendance = attendance_2025[attendance_2025['STUDENT_ID'].isin(group_t48a['student_id'])]

# Mostrar las primeras filas del resultado final
print(filtered_attendance)

# Definir el rango de fechas de clase (lunes a miércoles entre 21 de enero y 11 de febrero de 2025)
date_range = pd.date_range(start="2025-01-21", end="2025-02-11", freq="B")  # 'B' incluye días hábiles (lunes-viernes)
valid_days = date_range[date_range.weekday < 3]  # Filtrar solo lunes (0), martes (1), miércoles (2)

# Total de días de clase
total_class_days = len(valid_days)

# Contar asistencias por estudiante
attendance_count = filtered_attendance.groupby("STUDENT_ID")['DT'].nunique()

# Crear un DataFrame con todos los estudiantes y su asistencia
attendance_summary = pd.DataFrame({'STUDENT_ID': group_t48a['student_id']})
attendance_summary['ASISTENCIAS'] = attendance_summary['STUDENT_ID'].map(attendance_count).fillna(0).astype(int)
attendance_summary['FALTAS'] = total_class_days - attendance_summary['ASISTENCIAS']

# Mostrar el resumen final de asistencia y faltas
print(attendance_summary)