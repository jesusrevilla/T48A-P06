# -*- coding: utf-8 -*-
"""Transformacion_datos_177499.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XwMQ0rWBtKXLUNH6YSiKxCONyt1_DFk5
"""

import pandas as pd
import numpy as np

#Importar los archivos
url_group = "https://raw.githubusercontent.com/axel456-ADM/T48A-P06/feature/177499/STUDENT_GROUP.csv"
url_attendance = "https://raw.githubusercontent.com/axel456-ADM/T48A-P06/feature/177499/attendance.csv"

#Zona horaria local
LOCAL_TZ = 'America/Mexico_City'

#Transformación y Merge

#STUDENT_ID en df_attendance a student_id
df_attendance = df_attendance.rename(columns={'STUDENT_ID': 'student_id'})

#Convertir student_id a string en ambos df para el merge
df_group['student_id'] = df_group['student_id'].astype(str)
df_attendance['student_id'] = df_attendance['student_id'].astype(str)

#Realizar el Merge
df_merged = pd.merge(df_group, df_attendance, on='student_id', how='inner')
print("\nMerge completado después de corregir el tipo de dato.")
print("\n--- Dataframe Fusionado (Primeras filas) ---")
print(df_merged.head().to_markdown(index=False, numalign="left", stralign="left"))


#Cambiar el timestamp (UTC) a su hora local
df_merged['DTTM'] = pd.to_datetime(df_merged['DTTM'], errors='coerce')

#Localizar en UTC y convertir a la hora local
df_merged['timestamp_local'] = (
    df_merged['DTTM']
    .dt.tz_localize('UTC', ambiguous='infer', nonexistent='shift_forward')
    .dt.tz_convert(LOCAL_TZ)
)

#Extraer la fecha local
df_merged['fecha_local'] = df_merged['timestamp_local'].dt.date

print(f"\nConversión de Timestamp completada (UTC -> {LOCAL_TZ}).")
print("Columnas de tiempo fusionadas:")
print(df_merged[['DTTM', 'timestamp_local', 'fecha_local']].head().to_markdown(index=False, numalign="left", stralign="left"))


#Reporte de Días con más faltas/incidencias por Grupo

#Cuenta las incidencias agrupando por grupo y la fecha local
reporte_faltas = (
    df_merged.groupby(['group_id', 'fecha_local'])['ID'] #Usa ID de attendance como contador
    .count()
    .reset_index()
    .rename(columns={'ID': 'Total_Incidencias'})
)

#Encuentra el día con el máximo de incidencias para cada grupo
idx_max_incidencias = reporte_faltas.groupby('group_id')['Total_Incidencias'].idxmax()
dias_mas_faltas_por_grupo = reporte_faltas.loc[idx_max_incidencias]
dias_mas_faltas_por_grupo = dias_mas_faltas_por_grupo.sort_values(by='Total_Incidencias', ascending=False)

print("\n--- REPORTE FINAL: Días con Más Faltas/Incidencias por Grupo ---")
print(dias_mas_faltas_por_grupo.to_markdown(index=False, numalign="left", stralign="left"))

