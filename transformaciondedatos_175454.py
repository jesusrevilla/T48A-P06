# -*- coding: utf-8 -*-
"""TransformacionDeDatos.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fb9LXwQx4h97omXM6l7Ji98vNd5RuX0Z

**1.- Importe los archivos csv y conviertalos a pandas dataframe**
"""

import pandas as pd

groups_df =pd.read_csv('STUDENT_GROUP.csv')
groups_df.head()

attendance_df = pd.read_csv('attendance.csv')
attendance_df.head()

"""**2.- Utilice el atrubuto dtypes de pandas para entender los tipos de datos**"""

groups_df.dtypes

attendance_df.dtypes

"""**3.- Transforme uno de los dataframes para poder realizar un merge (join: intersección) entre los dataframes**"""

groups_df['student_key'] = pd.to_numeric(groups_df['student_id'], errors='coerce') \
                              .apply(lambda v: str(int(v)) if pd.notna(v) else None)

attendance_df['student_key'] = pd.to_numeric(attendance_df['STUDENT_ID'], errors='coerce') \
                                  .apply(lambda v: str(int(v)) if pd.notna(v) else None)

"""**4.-El timestamp esta en UTC**

**5.- Cambie el timestamp a su hora local**
"""

from zoneinfo import ZoneInfo

attendance_df['DTTM_utc'] = pd.to_datetime(attendance_df['DTTM'], errors='coerce', utc=True)

attendance_df['DTTM_local'] = attendance_df['DTTM_utc'].dt.tz_convert(ZoneInfo("America/Monterrey"))#Conversion a local

attendance_df['DATE_local'] = attendance_df['DTTM_local'].dt.date

merged = groups_df[['group_id', 'student_key']].merge(
    attendance_df[['student_key','DATE_local']],
    on='student_key',
    how='inner'
)
merged.head()

"""**6.- Genere un reporte de los días en los que los alumnos faltan más por cada grupo**"""

roster = groups_df.groupby('group_id')['student_key'].nunique().rename('total_alumnos')

presentes = (
    merged.groupby(['group_id','DATE_local'])['student_key']
    .nunique()
    .rename('asistieron')
    .reset_index()
)

presentes = presentes.merge(roster.reset_index(), on='group_id', how='left')
presentes['ausencias'] = (presentes['total_alumnos'] - presentes['asistieron']).clip(lower=0)

max_por_grupo = presentes.groupby('group_id')['ausencias'].transform('max')
presentes['es_max_del_grupo'] = presentes['ausencias'] == max_por_grupo

reporte_max = presentes[presentes['es_max_del_grupo']] \
    .sort_values(['group_id','DATE_local']) \
    .reset_index(drop=True)

print("\n\t\t\tResumen (primeras filas):")
print(presentes.head(20).to_string(index=False))

print("\n\n\t\t\tDías con más ausencias por grupo:")
print(reporte_max.to_string(index=False))